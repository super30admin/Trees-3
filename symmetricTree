//TimeComplexity O(n)
//SpaceComplexity O(n)

//bfs
class Solution {
    boolean result;
    public boolean isSymmetric(TreeNode root) {
        if(root == null)return true;
     Queue<TreeNode> q = new LinkedList<>();
        q.add(root.left);
        q.add(root.right);
     
        while(!q.isEmpty()){
            
            TreeNode left = q.poll();
            TreeNode right = q.poll();
            
            if(left == null && right == null)continue;
            if(left == null || right == null || left.val != right.val){
                return false;
            }
            q.add(left.left);
            q.add(right.right);
            q.add(left.right);
            q.add(right.left);
        }
      return true;  
    }
   
    }
    
    //dfs
    
    //timeComplexity O(n)
    //spaceComplexity O(n)
    
    class Solution {
    boolean result;
    public boolean isSymmetric(TreeNode root) {
        result = true;
      
        dfs(root.left,root.right);
        return result;
    }
    
    private void dfs(TreeNode left, TreeNode right){
        
        if(left == null && right == null)return;
        
        if((left == null || right == null) || left.val != right.val){
             
            result = false;
        }
        
        if(result){
            dfs(left.left, right.right);
       
        dfs(left.right,right.left);
        }
        
        
    }
   
    }

