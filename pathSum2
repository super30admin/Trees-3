/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //113. Path Sum II
    //Using backtracking
    //Time complexity: O(n)
    //Space Complexity: O(n)
    
    ArrayList<List<Integer>> result ;
    int target;
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        
         result = new ArrayList<>();
        if(root == null)
            return result;
       
        target = sum;
        backtrack(root,0,new ArrayList<>());
        return result;
        
    }
    
    private void backtrack(TreeNode root,int currSum,List<Integer> path){
        
        //base condition
        
            if(root == null)
                return;
        
        currSum = currSum + root.val;
          path.add(root.val);
        if(root.left == null && root.right == null && currSum == target)
            result.add(new ArrayList<>(path));      //creates a new arrayList 
        
       
        backtrack(root.left,currSum,path);
        backtrack(root.right,currSum,path);
        path.remove(path.size()-1);
            
    }
}