/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /** Time Complexity - O(N)
    Space Complexity O (N)
     */
    List<List<Integer>> results;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        results = new ArrayList<>();
        helper(root, 0, targetSum, new ArrayList<>());
        return results;
    }

    private void helper(TreeNode node, int currSum, int targetSSum, List<Integer> nodes)
    {
        if (node == null) {
            return;
        }

        currSum += node.val;

        nodes.add(node.val);
        if (node.left == null && node.right == null && currSum == targetSSum) {
            results.add(new ArrayList<>(nodes));
        }

        helper(node.left, currSum, targetSSum, nodes);
        helper(node.right, currSum, targetSSum, nodes);
        // backtracking
        nodes.remove(nodes.size() -1);
    }
}
