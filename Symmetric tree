/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
       if(root==null){
           return true;
       } 
    return  dfs(root,root);
    }
    public boolean dfs(TreeNode root1, TreeNode root2){
        if(root1==null && root2==null){
            return true;
        }
        if((root1 != null && root2 != null) && root1.val==root2.val ){
           return( dfs(root1.left, root2.right) && dfs(root1.right,root2.left));
        }
         return false;
    }
}
//Time complexity: O(n)
//Space Complexity: O(h)
//Approach: Recursively call dfs on left and right and check if values are same or not
