Approach1 : Recursive
Time Complexity : O(N)
Space Complexity : Recursive Call . Depth of the tree. Log(N)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        def helper(left,right):
            if left is None and right is None:
                return True
            if (left is None or right is None or left.val!=right.val):
                return False
            return helper(left.left,right.right) and (left.right,right.left)
        ## Base Case
        if root is None:
            return True
        return helper(root.left,root.right)
