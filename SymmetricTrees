// Time Complexity: O(N), N = total number of nodes in the tree
// Space Complexity: O(H), H = height of the tree, recursive stack space

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        
        return helper(root.left, root.right);
    }
    private boolean helper(TreeNode left, TreeNode right) {
        // base case
        if(left == null && right == null) 
            return true;
        if(left == null || right == null)
            return false;
        if(left.val != right.val)
                return false;
        // logic
        return helper(left.left, right.right) && helper(left.right, right.left);
    }
}
