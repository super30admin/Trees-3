/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode * root, vector<int> path, vector<vector<int>> &ans, int targetSum, int currSum){
        if(!root) return;
        
        currSum += root->val;
        path.push_back(root->val);
        
        if(!root->left && !root->right){
            if(currSum == targetSum){
                ans.push_back(path);
            }
            path.pop_back();
            return;
        }
        
        helper(root->left, path, ans, targetSum,currSum);
        helper(root->right, path, ans, targetSum,currSum);
        path.pop_back();
        
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        vector<int> path;
        
        if(!root) return ans;
        helper(root, path, ans, targetSum,0);
        return ans;
    }
};


// Time Complecity: o(n^2),  where n is the number of nodes. We traverse all the nodes once and copy the nodes if path with target sum is found.
// Space Complexity: o(n)
