/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/* TC: O(n^2) -> traversing through every node: O(n), 
 and copying the every node at leaf nodes, worst case time complexity could reach O(n^2) when there is complete binary tree, for every N/2 leafs, we perform potential O(N) operation of copying
 SP: O(n^2) -> stack space: O(n), making copies of n nodes: O(n^2)*/
/*class Solution {
       List<List<Integer>> output; 
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        output = new ArrayList<>();
        helper(0, new ArrayList<Integer>(), root, sum);
        return output;
    }
    
    public void helper(int curr_sum, List<Integer> curr_path, TreeNode node, int target){
        
        if(node == null) return;
        
        //leaf or non-leaf node
        curr_sum += node.val;
        curr_path.add(node.val);
        
        if(node.left == null && node.right == null && curr_sum == target){
            output.add(new ArrayList<Integer>(curr_path));
        }
        else{
            helper(curr_sum, curr_path, node.left, target);
            helper(curr_sum, curr_path, node.right, target);
        }
        curr_path.remove(curr_path.size()-1);
    }
}*/
class Node{
    int currsum;
    List<Integer> path;
    TreeNode node;
    
    Node(int currsum, List<Integer> path, TreeNode node){
        this.currsum = currsum;
        this.path = path;
        this.node = node;
    }
}

class Solution{
    public List<List<Integer>> pathSum(TreeNode root, int sum){
        
        List<List<Integer>> output = new ArrayList<>();
        Stack<Node> stack = new Stack<Node>();
        stack.push(new Node(0, new ArrayList<Integer>(), root));
        
        while(!stack.isEmpty()){
            
            Node n = stack.pop();
            
           // fetach values from Node 
            int curr_sum = n.currsum;
            List<Integer> path = n.path;
            TreeNode node1 = n.node;
           
           
            if(node1 != null){
                
            //operations perform whether leaf or not leaf
                curr_sum += node1.val;
                path.add(node1.val);
              
            // if leaf node
                if(node1.left == null && node1.right == null && curr_sum == sum){
                    output.add(path);
                    continue;
                }
                
          //  path.remove(path.size()-1);
            stack.push(new Node(curr_sum, new ArrayList<>(path), node1.right));
            stack.push(new Node(curr_sum, new ArrayList<>(path), node1.left));
        
        }    
            
        }
        return output;
    }
}
