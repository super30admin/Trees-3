// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1 -  Recursion
              TC - O(n^2) - at each node we r copying the list -> n nodes, n copies
              SC - O(n ^ 2) - at each node, we r creating a new list

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result;
    int targetSum;
    
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        this.targetSum = targetSum;
        helper(root, 0, new ArrayList<>());
        return result;
    }
    
    private void helper(TreeNode root, int currSum, List<Integer> list)
    {
        // base case
        if(root == null)
            return;
        currSum += root.val;
        list.add(root.val);
        helper(root.left, currSum, new ArrayList(list));
        if(root.left == null && root.right == null)
        {
            if(targetSum == currSum)
            {
                result.add(list);
            }
        }
        helper(root.right, currSum, new ArrayList(list));
        return;
    }
}

Solution 2 -  Backtracking
              TC - O(n) - just for traversing n nodes
              SC - O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result;
    int targetSum;
    
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        this.targetSum = targetSum;
        helper(root, 0, new ArrayList<>());
        return result;
    }
    
    private void helper(TreeNode root, int currSum, List<Integer> list)
    {
        // base case
        if(root == null)
            return;
        currSum += root.val;
        
        // action
        list.add(root.val);
        
        // recursion 
        helper(root.left, currSum, list);
        if(root.left == null && root.right == null)
        {
            if(targetSum == currSum)
            {
                //new ArrayList<>(list) cz list is added as refernce and when we backtrack, the values will all the removed and we will get an empty list, to avoid that we copy the resultant list to new list and store it in result before backtracking happens
                result.add(new ArrayList<>(list));
            }
        }
        helper(root.right, currSum, list);
        
        // backtrack - as list is passed as reference, so everytime a node is added to list, it will be the same list so at the end we will have all the nodes in that list but we want only path whose curSum = targetSum, so we will need to remove additional nodes fromm our list
        list.remove(list.size() - 1);
        return;
    }
}
