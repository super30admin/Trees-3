/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<vector<int>> result;
    // Time Complexity --> O(N)
    // Space Complecity --> O(N)
public:
    void dfs(TreeNode* root, int targetSum,vector<int> v){
        if(root == NULL){
            return;
        }
        if(root->left == NULL && root->right == NULL && targetSum == root->val){
            v.push_back(root->val);
            result.push_back(v);
            return;
        }
        v.push_back(root->val);
        dfs(root->left,targetSum - root->val,v);
        dfs(root->right,targetSum - root->val,v);
    }
    
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(root == NULL){
            return result;
        }
        dfs(root,targetSum ,{});
        return result;
    }
};
