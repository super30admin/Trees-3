//TC:- O(n)
//SC:- O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        
        helper(root, targetSum, 0, new ArrayList());
        
        return result;
        
    }
    
    private void helper(TreeNode root, int targetSum, int currSum, List<Integer> currList)
    {
        if(root == null){return;}
        
        if(root.left == null && root.right == null && (currSum + root.val) == targetSum)
        {
            currSum = currSum+root.val;
            currList.add(root.val);
            
            result.add(new ArrayList(currList));
            currList.remove(currList.size()-1);
            
            return;
        }
        currSum = currSum + root.val;
        currList.add(root.val);
        
        helper(root.left, targetSum, currSum, currList);
        helper(root.right, targetSum, currSum, currList);
        
        
        //backtrack
        currList.remove(currList.size()-1);
        
    }
}
