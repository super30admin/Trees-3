{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    \
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\
        result = []\
        def helper(root, targetSum, cursum, path):\
            \
            #base case\
            if not root:\
                return\
            cursum += root.val\
            path.append(root.val)\
           \
            if root.left == None and root.right == None:\
                if cursum == targetSum:\
                    result.append(list(path))\
                \
            #logic\
            helper(root.left, targetSum, cursum, path)\
            \
            helper(root.right, targetSum, cursum, path)\
            \
            path.pop()\
        \
        path = []\
        helper(root, targetSum, 0, path)\
        \
        return result}