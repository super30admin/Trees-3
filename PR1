/* Space Complexity : O(n*n/2) -> number of nodes in the tree * new array size is n.
// Time Complexity : O(n) - > All the nodes.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : At every stage maintain a copy of the current array list.// */



class Solution {
    List<List<Integer>> result;
    int target;
    public void helper(TreeNode root,int currSum, List<Integer> temp){
        //base case
        if(root==null) return;
        //logic
        currSum+=root.val;
        temp.add(root.val);
        if(root.left==null && root.right==null) 
        {   if(currSum==target){
            result.add(temp);
        }
        }
            
        helper(root.left,currSum,new ArrayList<>(temp));
        helper(root.right,currSum,new ArrayList<>(temp));
            
    }
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        result=new ArrayList<>();
        if(root==null) return result;
        target=sum;
        helper(root,0,new ArrayList<>());
        return result;
        
        
    }
}
/* Space Complexity : O(1) -> constant space
// Time Complexity : O(n) - > All the nodes.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach : Only while returning the result create a new copy and give the result. Backracking approach. If the target value not found at the leaf remove that node value from the array list before proceeding to the next. At the end of the backtracking gives an empty array list as we remove.
// */




class Solution {
    List<List<Integer>> result;
    int target;
    public void helper(TreeNode root,int currSum, List<Integer> temp){
        //base case
        if(root==null) return;
        //logic - action
        currSum+=root.val;
        temp.add(root.val);
        if(root.left==null && root.right==null) 
        {   if(currSum==target){
            result.add(new ArrayList<>(temp));
        }
        }
         //recurse  
        helper(root.left,currSum,temp);
        helper(root.right,currSum,temp);
        //backrack
        temp.remove(temp.size()-1); 
        
            
    }
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        result=new ArrayList<>();
        if(root==null) return result;
        target=sum;
        helper(root,0,new ArrayList<>());
        return result;
        
        
    }
}