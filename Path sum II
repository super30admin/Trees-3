/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// time complexity:O(n)
//space complexity:O(height)
class Solution {
     List<List<Integer>> result;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
       result = new ArrayList<>();
        if(root == null)
        {
            return result;
        }

        helper(root,0,targetSum,new ArrayList<>());
        return result;
    }

    private  void helper(TreeNode root, int currSum, int targetSum, List<Integer> path)
    {
        if(root == null)
        {
            return;
        }

        currSum = currSum + root.val;

        path.add(root.val);
        if(root.left == null && root.right == null){
            if(currSum == targetSum)
            {
                result.add(new ArrayList<>(path));
            }
        }

        helper(root.left,currSum,targetSum,new ArrayList<>(path));
        helper(root.right,currSum,targetSum,new ArrayList<>(path));

        path.remove(path.size()-1);
    }
}
    
