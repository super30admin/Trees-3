/**
Time O(n)
Space O(n)
leetcode yes
problem no

go till the leaf node recusrively adding values to arraylist and subtracting values of nodes from sum, if sum becomes 0 at leaf, add the arraylist
of numbers till leaf to the resultant arraylist. 

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        
        List<Integer> arr = new ArrayList<>();
        List<List<Integer>> result = new ArrayList<>();
        helper(root, sum ,arr, result);
        return result;
         
    }
    
    
    public void helper(TreeNode root, int sum , List<Integer> arr, List<List<Integer>> result)
    
    {
        
        if(root==null) return ;
        if(root.left == null && root.right == null)
        {
            if(sum - root.val == 0)
            {   arr.add(root.val); 
                result.add(arr);
            
            }
            
        }
        
        else
        {
            arr.add(root.val);
            ArrayList copyArr = new ArrayList(arr);
        
            sum -= root.val;
        
            helper(root.left , sum, arr , result);
            helper(root.right , sum  , copyArr , result);
        }   
        
 
    }
}
