//TC : O(n)
//SC : O(h = logn)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = rig ht;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result;
    int target;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root == null) return new ArrayList<>();

        result = new ArrayList<>();
        target = targetSum;

        dfs(root, 0, new ArrayList<>()); 
        return result;
    }

    private void dfs(TreeNode root, int sum, List<Integer> path){
        if(root == null)return;

        path.add(root.val);
        int currSum = sum + root.val;

        if(root.left == null && root.right == null){
            if(target == currSum){
                result.add(path);
            }
            return;
        }
        dfs(root.left, currSum, new ArrayList<>(path));
        dfs(root.right, currSum, new ArrayList<>(path));
    }
}
