# Path Sum II

# Tc: O(n) 
# Sc: O(h)

from typing import List, Optional

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        if not root:
            return []

        result = []
        stack = [(root, [], 0)]

        while stack:
            node, current_path, current_sum = stack.pop()

            # Update the current path and sum
            current_path.append(node.val)
            current_sum += node.val

            # Check if it's a leaf node and the sum equals targetSum
            if not node.left and not node.right and current_sum == targetSum:
                result.append(list(current_path))

            # Push the right child first, then the left child to simulate the recursive stack
            if node.right:
                stack.append((node.right, list(current_path), current_sum))
            if node.left:
                stack.append((node.left, list(current_path), current_sum))

        return result
