/* Time Complexity : O(n) -> number of nodes in the tree
// Space Complexity : O(h)- where h is the height of the tree. - maximum number of elements in the stack possible
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Null conditions must be placed before other equality conditions is what I learnt while writing this code. Had a problem with null pointer exceptions.
// Your code here along with comments explaining your approach : Iteratively check left.left, right.right values and then check left.right and right.left values. If there is a mismatch, retur false. Other vise return true.

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        Stack<TreeNode> st=new Stack();
        st.add(root.right);st.add(root.left); 
        while(!st.isEmpty()){
            TreeNode left=st.pop();
            TreeNode right=st.pop();
            if(left==null && right==null) continue;
            if(left==null || right==null || left.val!=right.val) 
                return false;
            st.push(left.left);
            st.push(right.right);
            st.push(left.right);
            st.push(right.left);
        }
        return true;
    }
}
* Time Complexity : O(n) -> number of nodes in the tree
// Space Complexity : O(h)- where h is the height of the tree. - maximum number of elements in the stack possible
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Null conditions must be placed before other equality conditions is what I learnt while writing this code. Had a problem with null pointer exceptions.
// Your code here along with comments explaining your approach : Recursively check left.left, right.right values and then check left.right and right.left values. If there is a mismatch, retur false. Other vise return true.



class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        return helper(root.left,root.right);
    }
    
    private boolean helper(TreeNode left,TreeNode right){
        if(left==null && right==null) return true;//base case
        if(left==null || right==null || left.val!=right.val) return false;
        return helper(left.left,right.right) && helper(left.right,right.left);
    }
}